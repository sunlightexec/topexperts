<?php
/**
 * Created by PhpStorm.
 * User: Андрей
 * Date: 09.10.2018
 * Time: 15:29
 */

namespace app\models\helpers;

use yii\helpers\Json;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use app\components\jobs\RatingExpertJob;
use app\components\jobs\RatingProjectJob;

class Experts extends \app\models\Experts
{

    private $defAddr = [
        'facebook' => '',
        'twitter' => '',
        'youtube' => '',
        'tg_chat' => '',
        'tg_group' => '',
        'discord' => '',
        'reddit' => '',
        'medium' => '',
        'bitcointalk_forum' => '',
    ];

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                /*'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => new Expression('NOW()'),*/
            ],
        ];
    }

    public function prepareAdress()
    {
        return $this->defAddr;
    }


    public function setAddress($value = '{}')
    {
        if(is_array($value)) {
            $this->attributes['address'] = Json::encode($value);
            return $this->attributes['address'];
        }

        return $value;
    }

    public function beforeValidate()
    {
        if(empty($this->address)) $this->address = [];
        if(is_array($this->address)) {
            $this->address = Json::encode($this->address);
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public static function getList()
    {
        $arCats = self::find()->all();
        return ArrayHelper::map($arCats, 'id', 'name');
    }

    public static function getListOfNames()
    {
        $arCats = self::find()->all();
        return ArrayHelper::map($arCats, 'name', 'name');
    }

    public static function setRatings($expert_id)
    {
        $model = self::find()->where(['=', 'id', $expert_id])->one();

        /*$select = 'AVG(IF(project_data.flip >= graduation_ratings.min_star, project_data.flip, "0" )) as flip,' .
            'AVG(IF(project_data.hold >= graduation_ratings.min_star, project_data.hold, "0" )) as hold';*/

        $select = [
            'flipSum' => 'SUM(IF(projects.flip_all >= IF(project_data.max_value > 0, project_data.max_value, graduation_ratings.min_star), projects.flip_all, 0 ))',
            'holdSum' => 'SUM(IF(projects.hold_all >= IF(project_data.max_value > 0, project_data.max_value, graduation_ratings.min_star), projects.hold_all, 0 ))',
            'flipCount' => 'SUM(IF(projects.flip_all >= IF(project_data.max_value > 0, project_data.max_value, graduation_ratings.min_star), 1, 0 ))',
            'holdCount' => 'SUM(IF(projects.hold_all >= IF(project_data.max_value > 0, project_data.max_value, graduation_ratings.min_star), 1, 0 ))',
        ];

        $updates = ProjectData::find()
//            ->joinWith(['graduation'])
            ->join('LEFT JOIN', 'graduation_ratings', 'project_data.graduation_id=graduation_ratings.id')
            ->join('INNER JOIN', 'projects', 'project_data.project_id=projects.id')
            ->select($select)
            ->where(['=', 'project_data.expert_id', $expert_id])
            ->groupBy('project_data.expert_id')
            ->asArray()
            ->one();

//        print_r($updates);die();

        if(!empty($updates)) {
            if($model->sco)
            $model->flip = $updates['flipCount']==0 ? 0 : round($updates['flipSum'] / $updates['flipCount'],1);
            $model->hold = $updates['holdCount']==0 ? 0 : round($updates['holdSum'] / $updates['holdCount'],1);
            $model->save();
        }
    }

    public function afterSave($insert, $changedAttributes)
    {
        \Yii::$app->queue->push(
            new RatingExpertJob(['expert_id' => $this->id])
        );
        /*\Yii::$app->queue->delay(3 * 60)->push(
            new RatingProjectJob()
        );*/
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}